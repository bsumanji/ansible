---
- hosts: redhosts
  become: true
  become_user: root

  tasks:
    - name: inserting new lines block in a file
      blockinfile:
        path: /etc/hosts
        block: |                #Contains the block of lines to insert into the file.
                                #The '|' character allows multi-line block formatting in YAML. 
          #this is first new line
          #this is second new line
        marker: ""
      tags:
        - new

    - name: inserting line in between
      lineinfile:
        path: /etc/hosts
        line: '#this is inserted line in between'
        state: present
        insertafter: '^127.0.0.1'
      tags:
        - betwn


          # Method 1 to replace line


    - name: replacing first added line
      lineinfile:
        path: /etc/hosts
        line: '#this is a first replaced line'
        regexp: '#this is first new line'
        state: present
      tags:
        - replace1


          # Method 2 to replace line

    - name: replacing second added line
      replace:
        path: /etc/hosts
        regexp: '#this is second new line'
        replace: '#this is a second replaced line'
      tags:
        - replace2
        

    - name: deleting line
      lineinfile:
        path: /etc/hosts
        regexp: '^#this is'
        state: absent
      tags:
        - delete



        
    - name: commenting existing port number in /etc/httpd/conf/httpd.conf
      lineinfile:
        path: /etc/httpd/conf/httpd.conf
        regexp: '(?i)^(Listen.*)'
        line: '# \1'     
        backrefs: yes
        state: present
      tags:
        - cmt

   # Alternatively, when preceeding expression is spaces and digit, you can use --> regexp: '(?i)^(Listen\s+\d+)'
   # '\0' Refers to the entire matched string.
   # '\1' refers to the text matched by the entire Listen directive that was matched by the regexp).
   # \1, \2, etc.: Refer to capturing groups defined in the regexp pattern. For example, if you had a pattern like ^(PS1=)(.*), then \1 would refer to PS1= and \2 would refer to the part after PS1=.
   # \s is a shorthand character class that matches any whitespace character
   # \d is a shorthand character class that matches any digit (0-9)
   # + indicates that it should match one or more of the preceding token.


    - name: uncommenting existing port number in /etc/httpd/conf/httpd.conf
      lineinfile:
        path: /root/httpd.conf
        regexp: '^#\s*(Listen.*)'
        line: '\1'     
        backrefs: yes
        state: present
      tags:
        - ucmt

    - name: adding port
      lineinfile:
        path: /etc/httpd/conf/httpd.conf
        insertafter: '^#Listen'
        line: 'Listen 82'
        state: present
      tags:
        - addport



          ################### Commenting and uncommenting lines #######################

    - name: Backup the /etc/sudoers file
      copy:
        src: /etc/sudoers
        dest: /etc/sudoers.bak
        backup: yes
      tags:
        - backup


    - name: Add one hash'#' to comment lines in /etc/sudoers
      replace:
        path: /etc/sudoers.bak
        regexp: '^(.*)$'       # adds '#' in all lines even if present 
        replace: '# \g<0>'
      tags:
        - cmt


    - name: Comment all uncommented lines in /etc/sudoers
      replace:
        path: /etc/sudoers.bak
        regexp: '^(?!#|\s*$)'       # comments lines that are started without hash
        replace: '# \g<0>'
      tags:
        - cmt2


    - name: Uncomment with first '#' in all commented lines in /etc/sudoers
      replace:
        path: /etc/sudoers.bak
        regexp: '^#'                #uncomments by removing first hash only
        replace: ''
      tags:
        - ucmt

    - name: Uncomment all commented lines in /etc/sudoers
      replace:
        path: /etc/sudoers.bak
        regexp: '^#\s*'             #uncomments all lines removing every hashes
        replace: ''
      tags:
        - ucmt2

